#!/usr/bin/env ruby
require 'pathname'
require 'thor'

def say(*args)
  @shell ||= Thor::Shell::Color.new
  @shell.say *args
end

def header(text)
  say "\n=== #{text} ===", :bold
end

def copy_sample(rel_path)
  unless File.exist? rel_path
    say rel_path, :blue
    system "cp #{rel_path}.sample #{rel_path}"
  end
end

def gsub_file(rel_path, regex, value)
  content = File.read(APP_ROOT.join(rel_path)).gsub(regex, value)
  File.write(rel_path, content)
end

# Path to your application root:
APP_ROOT = Pathname.new File.expand_path('../../',  __FILE__)

# Add necessary setup steps to this block:
Dir.chdir APP_ROOT do
  header "Installing dependencies"
  # Add dependencies installation here if required (for example `system "npm install"`):
  system "gem install bundler --conservative"
  system "bundle check || bundle install"

  header "Copying and configuring sample files"
  # Add copying and configuring sample files here:
  # (Example configures database.yml)
  # You can use gsub_file to add other values to any file.
  # For example: gsub_file("config/secrets.yml", /SECRET_KEY_BASE:.*\n/, "SECRET_KEY_BASE: #{SecureRandom.hex(64)}")
  copy_sample "config/database.yml"
  say "\nWhat is your database username? ", :yellow
  username = gets
  gsub_file("config/database.yml", /username:.*\n/, "username: #{username}")
  say "\nWhat is your database password? ", :yellow
  password = gets
  gsub_file("config/database.yml", /password:.*\n/, "password: #{password}")

  header "Preparing database"
  # Simple database setup here:
  # You can change it to `system "bin/rake db:setup"` or add additional commands
  # like `system "bin/rake db:test:prepare"`
  say "Creating database", :blue
  system "bin/rake db:create"
  say "Loading database schema", :blue
  system "bin/rake db:schema:load"
  say "Seeding database", :blue
  system "bin/rake db:seed"

  header "Removing old logs and tempfiles"
  system "rm -f log/*"
  system "rm -rf tmp/cache"

  header "Additional Notes"
  # Add additional notes for developer here:
  say "\nPlease use `bin/guard` command to ensure that test pass and code style match the guidelines", :yellow

  say "\n=== DONE! Now you must start real work! ===", :green
end
